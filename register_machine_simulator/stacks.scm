;; Constructor
(define (make-stack)
  (let ((stack '())
        (num-pushes 0)
        (current-depth 0)
        (max-depth 0))
    (define (push x)
      (set! stack (cons x stack))
      (set! num-pushes (+ 1 num-pushes))
      (set! current-depth (+ 1 current-depth))
      (set! max-depth (max current-depth max-depth)))
    (define (pop)
      (if (null? stack)
          (error "Empty stack -- POP")
          (let ((top (car stack)))
            (set! stack (cdr stack))
            (set! current-depth (- current-depth 1))
            top)))
    (define (initialize)
      (set! stack '())
      (set! num-pushes 0)
      (set! current-depth 0)
      (set! max-depth 0)
      'done)
    (define (print-statistics heading)
      (display (list 'total-pushes  '= num-pushes
                     'maximum-depth '= max-depth
                     heading))
      (newline))
    (define (dispatch message)
      (cond ((eq? message 'push) push)
            ((eq? message 'pop) (pop))
            ((eq? message 'initialize) (initialize))
            ((eq? message 'print-statistics) (lambda (head) (print-statistics head)))
            (else (error "Unknown request -- STACK" message))))
    dispatch))

;; Interface procedures
(define (pop stack)
  (stack 'pop))

(define (push stack value)
  ((stack 'push) value))
